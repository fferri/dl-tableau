/*GRAMMAR:T -> D <SUBSUMED_BY> D | A <DEFINED_AS> DD -> D <OR> C | CC -> C <AND> N | NN -> M | <NOT> MM -> <FORALL> A <DOT> F | <EXISTS> A <DOT> F | FF -> GG -> <PAR_OP> D <PAR_CL> | AA -> <ATOM>TRANSFORMED GRAMMAR: (without direct left recursion and common prefixes)T  -> D <SUBSUMED_BY> D | A <DEFINED_AS> DD  -> C D1D1 -> <OR> C D1 | <EPSILON>C  -> N C1C1 -> <AND> N C1 | <EPSILON>N  -> M | <NOT> MM  -> <FORALL> A <DOT> F | <EXISTS> A <DOT> F | FF  -> GG  -> <PAR_OP> D <PAR_CL> | AA  -> <ATOM>*/options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(DLLiteParser)package net.sf.dltableau.server.parser;
import net.sf.dltableau.server.logic.tbox.TBOX;import net.sf.dltableau.server.parser.ast.*;import java.io.StringReader;import java.util.List;import java.util.ArrayList;public class DLLiteParser{  public static AbstractNode parseConceptExpression(String s) throws ParseException  {    DLLiteParser p = new DLLiteParser(new StringReader(s));    return p.D();  }  public static AbstractDefinition parseDefinition(String s) throws ParseException  {    DLLiteParser p = new DLLiteParser(new StringReader(s));    return p.T();  }  public static List<AbstractDefinition> parseTBOXDefinitions(String s) throws ParseException  {    String t[] = s.split(";");    List<AbstractDefinition> r = new ArrayList<AbstractDefinition>();    for(String s1 : t)    {      r.add(parseDefinition(s1));    }    return r;  }}PARSER_END(DLLiteParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  < SUBSUMED_BY : "subsumed-by" >| < OR : ("|"|"or") >| < AND : ("&"|"and") >| < NOT : ("!"|"not") >
| < FORALL : "forall" >
| < EXISTS : "exists" >
| < DOT : "." >
| < PAR_OP : "(" >
| < PAR_CL : ")" >| < SEMICOLON : ";" >| < DEFINED_AS : "=" >| < TOP : ("top"|"true") >| < BOTTOM : ("bottom"|"false") >}TOKEN :{  < ATOM : (< CHARUPPERCASE >|< CHARLOWERCASE >)(< CHARUPPERCASE >|< CHARLOWERCASE >|< DIGIT >)* >
| < #CHARUPPERCASE : [ "A"-"Z" ] >
| < #CHARLOWERCASE : [ "a"-"z" ] >
| < #DIGIT : [ "0"-"9" ] >}
AbstractDefinition T() :{  AbstractNode n1, n2;  Atom atom;}{  LOOKAHEAD(3)    n1 = D() < SUBSUMED_BY > n2 = D()  {    return new SubsumedBy(n1, n2);  }| atom = A() < DEFINED_AS > n2 = D()  {	return new DefinedAs(atom, n2);  }}
AbstractNode D() :{  AbstractNode n, r;}{
  n = C() r = D1(n)  {    return r;  }}

AbstractNode D1(AbstractNode n) :{  AbstractNode n2, r;  Or or;}{
  < OR > n2 = C() {or = new Or(n, n2);} r = D1(or)  {    return r;  }  | {return n;}}

AbstractNode C() :{  AbstractNode n, r;}{
  n = N() r = C1(n)  {    return r;  }}

AbstractNode C1(AbstractNode n) :{  AbstractNode n2, r;  And and;}{
  < AND > n2 = N() {and = new And(n, n2);} r = C1(and)  {    return r;  }  | {return n;}}

AbstractNode N() :{  AbstractNode n;}{  < NOT > n = M()  {    return new Not(n);  }    | n = M()  {    return n;  }}AbstractNode M() :{  AbstractNode n;  Atom role;}{
  < FORALL > role = A() < DOT > n = F()  {	return new ForAll(role, n);  }    | < EXISTS > role = A() < DOT > n = F()  {	return new Exists(role, n);  }  | n = F()  {    return n;  }}AbstractNode F() :{  AbstractNode n;}{  n = G()  {    return n;  }}

AbstractNode G() :{  AbstractNode expr;  Atom atom;}{
  < PAR_OP > expr = D() < PAR_CL >  {    return new Parens(expr);  }  
  | atom = A()  {    return atom;  }
}

Atom A() :
{  Token atomToken;}{
  atomToken = < ATOM >  {    return new Atom(atomToken.image);  }}